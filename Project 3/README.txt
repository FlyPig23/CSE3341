- Name: Hangxiao Zhu

- Files: Project3.zip Project3, README, Assign.java, Cmpr.java, Cond.java, Core.java, Decl.java, DeclClass.java, DeclInt.java, DeclSeq.java, Executor.java, Expr.java, Factor.java, Id.java, IdList.java, If.java, In.java, Loop.java, Main.java, Out.java, Parser.java, Program.java, Scanner.java, Stmt.java, StmtSeq.java, Term.java

- Special features: Retain the consistency of almost all codes of different classes, i.e., basically each independent class contains three basic methods: parse, semantic, print and execute; Implement a HashMap to store global variables; Implement a Stack to store local variables; Implement a ArrayList to store ref variables by indices; Create a class CoreVar to keep track of the type and the value of each variable in one data structure.

- Description of the overall design: The overall structure is based on Project 2. I added to each class an execute function and a new Executor class. Execute function in each class aims at executing the corresponding sentence. The Executor class has functions named initialize(), allocate(), searchCorrespondingCoreVar(String i), inputRead(), which are helper functions for the execute process. The initialize() function initialize the data structure used, the allocate() function allocate variables to corresponding space, the searchCorrespondingCoreVar(String i) function finds the nearest CoreVar to current Id in the variable space, and the inputRead() function gets the next data for an input statement. It needs to be pointed out that in the searchCorrespondingCoreVar(String i) function, I handled the tracking and hiding variables process. For example, when variable x is declared both in the global space and the local space, by calling this function, the program will the declaration of x in the global space will be hidden temporarily while executing the local space statements. After that, the x in the local space go out of scope and the x in the global space becomes visible again. There are also some new functions in the Id class, including classAllocate(), intAllocate(), idValue(), stringForm(), allocateToHeap(); referenceAssign(Id source), expressionAssign(int value). The classAllocate() and intAllocate() are designed for allocating different types of variables to the memory, the idValue() returns the corresponding integer or reference value, the stringForm() simply returns the Id as a string, the allocateToHeap() is used for "id = new" statement, the referenceAssign(Id source) is used for "id = <expr>" statement; the expressionAssign(int value) is used for "id = ref id" statement.

- Test Process: I first ran the tester.sh file to see how many test cases failed. The first time I got multiple problems. Then I tried to find the similarities among them, for example, the failure on 13.code, 16.code, 22.code seemed to be quite similar because all of them have at least one loop control flow. Therefore I checked the code of my loop class and its related classes and located the problems. Dealing with exceptions is also a problem in my original code because I neglected many possible errors, such as when converting Integer to int I did not consider the case of Integer being null. So I added some suitable try-catch blocks based on the compiler's hints and the structure of the data. In addition, I created some special examples and tested my code. 

- Bugs: No bug remaining.



