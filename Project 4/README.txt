- Name: Hangxiao Zhu

- Files: Project4.zip Project4, README, Assign.java, Cmpr.java, Cond.java, Core.java, Decl.java, DeclClass.java, DeclInt.java, DeclSeq.java, Executor.java, Expr.java, Factor.java, Formals.java, FuncCall.java, FuncDecl.java, Id.java, IdList.java, If.java, In.java, Loop.java, Main.java, Out.java, Parser.java, Program.java, Scanner.java, Stmt.java, StmtSeq.java, Term.java

- Special features: Retain the consistency of almost all codes of different classes, i.e., basically each independent class contains three basic methods: parse, semantic, print and execute; Implement a HashMap to store global variables; Implement a Stack of Stack of HashMap to store local variables; Implement an ArrayList to store ref variables by indices; Separate the semantic process from parse and execute processes.

- Description of the overall design: The overall structure is based on Project 3. I added Formals.java, FuncCall.java, FuncDecl.java to handle the functions. I also added a new function in Executor class to help processing the calling functions process. The main design idea of this project is still to continue the previous projects, treating each function as a separate Stack and storing the elements of each function in a HashMap. In order to handle multiple new functions and recursions, the data structure of Stack of Stack of HashMap is used, so that each time a function is called, only a new layer of Stack is needed to be pushed, and each time the process of calling function is finished, only the Stack of that function needs to be popped. Following this philosophy, I used Stack of Stack of HashMap structure in both semantic and execute processes. During the semantic process, I followed the rules of the parse tree and verified the syntax of the caller function and callee function step by step. In the execute process, I added pushStackForCall() function to the Executor class. The function's utility is to create a new stack for the callee function and to verify that the process of using the method is compliant during the call. That is, Make sure that the formal parameters and the actual parameters correspond to each other. 

- Test Process: I first ran the tester.sh file to see how many test cases failed. The first time I got bunch of problems. Then I tried to find the similarities among them, for example, all the correct test files fail to use the formal parameter. Therefore I suggested that I failed to store the formal parameters into the stack space, then I checked the code of each spot where I called push() and pop() function, then I located the error at the semantic() function in FuncDecl class. Besides, when the program running through the stack to find whether the "id" has been declared, it fell into an infinite loop. I checked my checkByLayer() function in Parser.class and changed scopeLayer.peek().peek() to scopeLayer.peek().pop() & scopeLayer.peek().push() to handle this problem. In general, most of the bugs happened during the pop and push processes, after running through the whole program carefully many times and checking every pop and push process meticulously, all bugs are resolved.

- Bugs: No bug remaining.



